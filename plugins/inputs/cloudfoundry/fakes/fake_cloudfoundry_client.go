// Code generated by counterfeiter. DO NOT EDIT.
//
// counterfeiter \
//    -o ./plugins/inputs/cloudfoundry/fakes/fake_cloudfoundry_client.go \
//    ./plugins/inputs/cloudfoundry \
//    CloudfoundryClient
//
package fakes

import (
	"context"
	"sync"

	loggregator "code.cloudfoundry.org/go-loggregator/v8"
	"code.cloudfoundry.org/go-loggregator/v8/rpc/loggregator_v2"
	cfclient "github.com/cloudfoundry-community/go-cfclient"
)

type FakeCloudfoundryClient struct {
	ListAppsStub        func() ([]cfclient.App, error)
	listAppsMutex       sync.RWMutex
	listAppsArgsForCall []struct {
	}
	listAppsReturns struct {
		result1 []cfclient.App
		result2 error
	}
	listAppsReturnsOnCall map[int]struct {
		result1 []cfclient.App
		result2 error
	}
	StreamStub        func(context.Context, *loggregator_v2.EgressBatchRequest) loggregator.EnvelopeStream
	streamMutex       sync.RWMutex
	streamArgsForCall []struct {
		arg1 context.Context
		arg2 *loggregator_v2.EgressBatchRequest
	}
	streamReturns struct {
		result1 loggregator.EnvelopeStream
	}
	streamReturnsOnCall map[int]struct {
		result1 loggregator.EnvelopeStream
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudfoundryClient) ListApps() ([]cfclient.App, error) {
	fake.listAppsMutex.Lock()
	ret, specificReturn := fake.listAppsReturnsOnCall[len(fake.listAppsArgsForCall)]
	fake.listAppsArgsForCall = append(fake.listAppsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListApps", []interface{}{})
	fake.listAppsMutex.Unlock()
	if fake.ListAppsStub != nil {
		return fake.ListAppsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAppsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudfoundryClient) ListAppsCallCount() int {
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	return len(fake.listAppsArgsForCall)
}

func (fake *FakeCloudfoundryClient) ListAppsCalls(stub func() ([]cfclient.App, error)) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = stub
}

func (fake *FakeCloudfoundryClient) ListAppsReturns(result1 []cfclient.App, result2 error) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = nil
	fake.listAppsReturns = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfoundryClient) ListAppsReturnsOnCall(i int, result1 []cfclient.App, result2 error) {
	fake.listAppsMutex.Lock()
	defer fake.listAppsMutex.Unlock()
	fake.ListAppsStub = nil
	if fake.listAppsReturnsOnCall == nil {
		fake.listAppsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.App
			result2 error
		})
	}
	fake.listAppsReturnsOnCall[i] = struct {
		result1 []cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudfoundryClient) Stream(arg1 context.Context, arg2 *loggregator_v2.EgressBatchRequest) loggregator.EnvelopeStream {
	fake.streamMutex.Lock()
	ret, specificReturn := fake.streamReturnsOnCall[len(fake.streamArgsForCall)]
	fake.streamArgsForCall = append(fake.streamArgsForCall, struct {
		arg1 context.Context
		arg2 *loggregator_v2.EgressBatchRequest
	}{arg1, arg2})
	fake.recordInvocation("Stream", []interface{}{arg1, arg2})
	fake.streamMutex.Unlock()
	if fake.StreamStub != nil {
		return fake.StreamStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.streamReturns
	return fakeReturns.result1
}

func (fake *FakeCloudfoundryClient) StreamCallCount() int {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	return len(fake.streamArgsForCall)
}

func (fake *FakeCloudfoundryClient) StreamCalls(stub func(context.Context, *loggregator_v2.EgressBatchRequest) loggregator.EnvelopeStream) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = stub
}

func (fake *FakeCloudfoundryClient) StreamArgsForCall(i int) (context.Context, *loggregator_v2.EgressBatchRequest) {
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	argsForCall := fake.streamArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudfoundryClient) StreamReturns(result1 loggregator.EnvelopeStream) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	fake.streamReturns = struct {
		result1 loggregator.EnvelopeStream
	}{result1}
}

func (fake *FakeCloudfoundryClient) StreamReturnsOnCall(i int, result1 loggregator.EnvelopeStream) {
	fake.streamMutex.Lock()
	defer fake.streamMutex.Unlock()
	fake.StreamStub = nil
	if fake.streamReturnsOnCall == nil {
		fake.streamReturnsOnCall = make(map[int]struct {
			result1 loggregator.EnvelopeStream
		})
	}
	fake.streamReturnsOnCall[i] = struct {
		result1 loggregator.EnvelopeStream
	}{result1}
}

func (fake *FakeCloudfoundryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listAppsMutex.RLock()
	defer fake.listAppsMutex.RUnlock()
	fake.streamMutex.RLock()
	defer fake.streamMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudfoundryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
